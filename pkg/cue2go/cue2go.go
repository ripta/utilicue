package cue2go

import (
	"bytes"
	"errors"
	"fmt"
	"go/format"
	"io/fs"
	"log"
	"os"
	"path/filepath"
	"strings"

	"cuelang.org/go/cue"
	"cuelang.org/go/cue/cuecontext"
	"cuelang.org/go/cue/load"
)

type Generator struct {
}

func (gen *Generator) Run(args []string) error {
	if len(args) == 0 {
		return errors.New("no input directories or files provided")
	}

	for _, arg := range args {
		files := []string{}

		abs, err := filepath.Abs(arg)
		if err != nil {
			return err
		}

		fi, err := os.Stat(abs)
		if err != nil {
			return err
		}

		if !fi.IsDir() {
			files = append(files, abs)
			continue
		}

		fs.WalkDir(os.DirFS(abs), ".", func(path string, d fs.DirEntry, err error) error {
			if err != nil {
				return err
			}
			if d.IsDir() {
				return nil
			}

			if filepath.Ext(path) == ".cue" {
				files = append(files, filepath.Join(abs, path))
			}
			return nil
		})

		ctx := cuecontext.New()
		insts := load.Instances(files, nil)
		if len(insts) != 1 {
			return fmt.Errorf("expected exactly one instance, got %d", len(insts))
		}

		v := ctx.BuildInstance(insts[0])
		if err := v.Err(); err != nil {
			log.Fatal(err)
		}

		buf := &bytes.Buffer{}

		fmt.Fprintf(buf, "// Code generated by cue2go. DO NOT EDIT.\n")
		fmt.Fprintf(buf, "// Source: %s\n", abs)
		fmt.Fprintf(buf, "package %s\n", filepath.Base(abs))

		it, err := v.Fields(cue.Definitions(true))
		if err != nil {
			return fmt.Errorf("error iterating over definitions: %w", err)
		}

		for it.Next() {
			v := it.Value()
			if !it.Selector().IsDefinition() || v.IncompleteKind() != cue.StructKind {
				continue
			}
			valueToGo(buf, it.Selector(), v)
		}

		src, err := format.Source(buf.Bytes())
		if err != nil {
			return fmt.Errorf("error formatting output: %w", err)
		}

		if err := os.WriteFile(filepath.Join(abs, "generated.cue2go.go"), src, 0644); err != nil {
			return fmt.Errorf("error writing output file: %w", err)
		}
	}

	return nil
}

func valueToGo(buf *bytes.Buffer, name cue.Selector, val cue.Value) {
	switch k := val.IncompleteKind(); k {
	case cue.StringKind, cue.IntKind, cue.FloatKind, cue.BoolKind:
		fmt.Fprintf(buf, "\t%v %v\n", name.Unquoted(), val.IncompleteKind())

	case cue.StructKind:
		if _, i := val.ReferencePath(); len(i.Selectors()) > 0 {
			fmt.Fprintf(buf, "\t%v %v\n", name.Unquoted(), strings.TrimPrefix(i.String(), "#"))
			return
		}

		structToType(buf, name, val)

	default:
		panic(fmt.Sprintf("unexpected kind %v at path %v", k, val.Path().String()))
	}
}

// structToType prints the top-level fields of a struct value
func structToType(buf *bytes.Buffer, name cue.Selector, val cue.Value) {
	fmt.Fprintf(buf, "\ntype %v struct {\n", strings.TrimPrefix(name.String(), "#"))

	// Iterate through the fields of the struct
	it, _ := val.Fields(cue.Optional(true))
	for it.Next() {
		valueToGo(buf, it.Selector(), it.Value())
	}

	fmt.Fprintf(buf, "}\n")
}
